--- ../bls/ffi/go/bls/bls.go	2019-11-11 18:03:32.085133260 +0900
+++ bls/bls.go	2019-11-11 18:09:05.029283358 +0900
@@ -1,23 +1,19 @@
 package bls
 
 /*
-#cgo bn256 CFLAGS:-DMCLBN_FP_UNIT_SIZE=4
-#cgo bn256 LDFLAGS:-lbls256
-#cgo bn384 CFLAGS:-DMCLBN_FP_UNIT_SIZE=6
-#cgo bn384 LDFLAGS:-lbls384
-#cgo bn384_256 CFLAGS:-DMCLBN_FP_UNIT_SIZE=6 -DMCLBN_FR_UNIT_SIZE=4
-#cgo bn384_256 LDFLAGS:-lbls384_256
-#cgo LDFLAGS:-lcrypto -lgmp -lgmpxx -lstdc++
-
-#cgo bn256_swapg CFLAGS:-DMCLBN_FP_UNIT_SIZE=4 -DBLS_SWAP_G
-#cgo bn256_swapg LDFLAGS:-lbls256
-#cgo bn384_swapg CFLAGS:-DMCLBN_FP_UNIT_SIZE=6 -DBLS_SWAP_G
-#cgo bn384_swapg LDFLAGS:-lbls384
-#cgo bn384_256_swapg CFLAGS:-DMCLBN_FP_UNIT_SIZE=6 -DMCLBN_FR_UNIT_SIZE=4 -DBLS_SWAP_G
-#cgo bn384_256_swapg LDFLAGS:-lbls384_256
-#cgo LDFLAGS:-lcrypto -lgmp -lgmpxx -lstdc++
+#cgo CFLAGS:-I${SRCDIR}./include -DBLS_ETH -DBLS_SWAP_G
+#cgo LDFLAGS:-lbls384_256 -lstdc++ -lm
+#cgo ios LDFLAGS:-L${SRCDIR}/lib/ios
+#cgo android,arm64 LDFLAGS:-L${SRCDIR}/lib/android/arm64-v8a
+#cgo android,arm LDFLAGS:-L${SRCDIR}/lib/android/armeabi-v7a
+#cgo android,amd64 LDFLAGS:-L${SRCDIR}/lib/android/x86_64
+#cgo linux,amd64 LDFLAGS:-L${SRCDIR}/lib/linux/amd64
+#cgo darwin,amd64 LDFLAGS:-L${SRCDIR}/lib/darwin/amd64
+#cgo darwin,arm64 LDFLAGS:-L${SRCDIR}/lib/darwin/arm64
+#cgo windows,amd64 LDFLAGS:-L${SRCDIR}/lib/windows/amd64
 typedef unsigned int (*ReadRandFunc)(void *, void *, unsigned int);
 int wrapReadRandCgo(void *self, void *buf, unsigned int n);
+#include <mcl/bn_c384_256.h>
 #include <bls/bls.h>
 */
 import "C"
@@ -641,6 +637,45 @@ func (sig *Sign) VerifyAggregateHashes(p
 	return C.blsVerifyAggregatedHashes(&sig.v, &pubVec[0].v, unsafe.Pointer(&h[0]), C.mclSize(hashByte), C.mclSize(n)) == 1
 }
 
+// SignHashWithDomain --
+func (sec *SecretKey) SignHashWithDomain(hashWithDomain []byte) (sig *Sign) {
+	if len(hashWithDomain) != 40 {
+		return nil
+	}
+	sig = new(Sign)
+	// #nosec
+	err := C.blsSignHashWithDomain(&sig.v, &sec.v, (*C.uchar)(unsafe.Pointer(&hashWithDomain[0])))
+	if err == 0 {
+		return sig
+	}
+	return nil
+}
+
+// VerifyHashWithDomain --
+func (sig *Sign) VerifyHashWithDomain(pub *PublicKey, hashWithDomain []byte) bool {
+	if len(hashWithDomain) != 40 {
+		return false
+	}
+	if pub == nil {
+		return false
+	}
+	// #nosec
+	return C.blsVerifyHashWithDomain(&sig.v, &pub.v, (*C.uchar)(unsafe.Pointer(&hashWithDomain[0]))) == 1
+}
+
+// VerifyAggregateHashWithDomain --
+// hashWithDomains is array of 40 * len(pubVec)
+func (sig *Sign) VerifyAggregateHashWithDomain(pubVec []PublicKey, hashWithDomains []byte) bool {
+	if pubVec == nil {
+		return false
+	}
+	n := len(pubVec)
+	if n == 0 || len(hashWithDomains) != n * 40 {
+		return false
+	}
+	return C.blsVerifyAggregatedHashWithDomain(&sig.v, &pubVec[0].v, (*[40]C.uchar)(unsafe.Pointer(&hashWithDomains[0])), C.mclSize(n)) == 1
+}
+
 ///
 
 var sRandReader io.Reader
